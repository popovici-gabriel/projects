<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="Custom PMD ruleset for EPIM LogisticsHub" xmlns="http://pmd.sf.net/ruleset/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>
    This is the custom PMD ruleset for EPIM LogisticsHub.
  </description>  
  <exclude-pattern></exclude-pattern>  
  <rule ref="rulesets/java/basic.xml"/>
  <rule ref="rulesets/java/braces.xml"/>
  <rule ref="rulesets/java/codesize.xml">
    <!-- The rule TooManyMethods is configured explicitly below -->
    <exclude name="TooManyMethods"/>
  </rule>
  <rule ref="rulesets/java/codesize.xml/TooManyMethods">
    <properties>
      <!-- The default value of the property maxmethods is 10 -->
      <property name="maxmethods" value="20"/>
    </properties>
  </rule>
  <rule ref="rulesets/java/clone.xml"/>
  <rule ref="rulesets/java/controversial.xml/AssignmentInOperand"/>
  <rule ref="rulesets/java/controversial.xml/DontImportSun"/>
  <rule ref="rulesets/java/design.xml">
    <!-- Excluding UseVarargs since this is a very array oriented programme -->
    <exclude name="UseVarargs"/>
  </rule>
  <rule ref="rulesets/java/imports.xml">
      <exclude name="TooManyStaticImports"/>
  </rule>
  <rule ref="rulesets/java/logging-java.xml"/>
  <rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
  <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
  <rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
  <rule ref="rulesets/java/naming.xml/NoPackage"/>
  <rule ref="rulesets/java/naming.xml/PackageCase"/>
  <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
  <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
  <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
  <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
  <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith"/>
  <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
  <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
  <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
  <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends"/>
  <rule ref="rulesets/java/strings.xml">
    <!-- The rule AvoidDuplicateLiterals is already handled by Checkstyle's MultipleStringLiterals check -->
    <exclude name="AvoidDuplicateLiterals"/>
  </rule>
  <rule ref="rulesets/java/unusedcode.xml"/>
</ruleset>
